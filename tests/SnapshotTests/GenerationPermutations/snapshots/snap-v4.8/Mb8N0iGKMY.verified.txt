// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace Whatever
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(public_partial_recordConversions_NonecharDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Char, Value = { _value }")]
    public partial record class public_partial_recordConversions_Nonechar : global::System.IEquatable<public_partial_recordConversions_Nonechar>, global::System.IEquatable<System.Char>,  global::System.IComparable<public_partial_recordConversions_Nonechar>, global::System.IComparable
    {
#if DEBUG   
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly System.Char _value;
        
        /// <summary>
        /// Gets the underlying <see cref="System.Char" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
        /// </summary>
        public System.Char Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            init
            {
                

                

                

                _value = value;
            }
        }


        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public public_partial_recordConversions_Nonechar()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private public_partial_recordConversions_Nonechar(System.Char value)
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static public_partial_recordConversions_Nonechar From(System.Char value)
        {
            

            

            

            public_partial_recordConversions_Nonechar instance = new public_partial_recordConversions_Nonechar(value);

            return instance;
        }
  
        // only called internally when something has been deserialized into
        // its primitive type.
        private static public_partial_recordConversions_Nonechar Deserialize(System.Char value)
        {
            

            

            

            return new public_partial_recordConversions_Nonechar(value);
        }
        
            public virtual global::System.Boolean Equals(public_partial_recordConversions_Nonechar other)
            {
              if (ReferenceEquals(null, other))
              {
                  return false;
              }

              // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
              // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
              if(!_isInitialized || !other._isInitialized) return false;

              if (ReferenceEquals(this, other))
              {
                  return true;
              }

              return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Char>.Default.Equals(Value, other.Value);
            }
             public global::System.Boolean Equals(public_partial_recordConversions_Nonechar other, global::System.Collections.Generic.IEqualityComparer<public_partial_recordConversions_Nonechar> comparer)
             {
                 return comparer.Equals(this, other);
             }

             
            public global::System.Boolean Equals(System.Char primitive)
            {
              return Value.Equals(primitive);
            }


        public static global::System.Boolean operator ==(public_partial_recordConversions_Nonechar left, System.Char right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(public_partial_recordConversions_Nonechar left, System.Char right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(System.Char left, public_partial_recordConversions_Nonechar right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(System.Char left, public_partial_recordConversions_Nonechar right) => !Equals(left, right.Value);

        public static explicit operator public_partial_recordConversions_Nonechar(System.Char value) => From(value);
        public static explicit operator System.Char(public_partial_recordConversions_Nonechar value) => value.Value;

        public int CompareTo(public_partial_recordConversions_Nonechar other) => Value.CompareTo(other.Value);
        public int CompareTo(object other) {
            if(other is null) return 1;
            if(other is public_partial_recordConversions_Nonechar x) return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type public_partial_recordConversions_Nonechar", nameof(other));
        }

        
    /// <inheritdoc cref="char.TryParse(string, out char)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// True if the value could a) be parsed by the underlying type, and b) passes any validation (after running any optional normalization).
    /// </returns>
    public static global::System.Boolean TryParse(string s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out public_partial_recordConversions_Nonechar result) {
        if(System.Char.TryParse(s, out var __v)) {
            
            
            result = new public_partial_recordConversions_Nonechar(__v);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="char.Parse(string)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static public_partial_recordConversions_Nonechar Parse(string s) {
        var r = System.Char.Parse(s);
        return From(r);
    }



          public override global::System.Int32 GetHashCode()
          {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32) 2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Char>.Default.GetHashCode(Value);
                return hash;
            }
          }

        private void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }


        

        // record enumerates fields - we just want our Value and to throw if it's not initialized.
        /// <summary>Returns the string representation of the underlying <see cref="System.Char" />.</summary>
    /// <inheritdoc cref="System.Char.ToString()" />
    public override global::System.String ToString() => _isInitialized ? Value.ToString() : "[UNINITIALIZED]";

        







        internal sealed class public_partial_recordConversions_NonecharDebugView
        {
            private readonly public_partial_recordConversions_Nonechar _t;

            public_partial_recordConversions_NonecharDebugView(public_partial_recordConversions_Nonechar t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Char";
            public System.Char Value => _t.Value ;

            public global::System.String Conversions => @"";
                }
    }

}