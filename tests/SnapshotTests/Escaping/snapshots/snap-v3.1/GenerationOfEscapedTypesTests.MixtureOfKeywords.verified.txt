// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace @bool.@byte.@short.@float.@object
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(@event2SystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(@event2TypeConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(@event2DebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: @record.@struct.@float.@decimal, Value = { _value }")]
    public partial class @event2 : global::System.IEquatable<@event2>, global::System.IEquatable<@record.@struct.@float.@decimal> 
    {
#if DEBUG   
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly @record.@struct.@float.@decimal _value;
        
/// <summary>
/// Gets the underlying <see cref="@record.@struct.@float.@decimal" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
/// </summary>
public @record.@struct.@float.@decimal Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }


        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public @event2()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private @event2(@record.@struct.@float.@decimal value)
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static @event2 From(@record.@struct.@float.@decimal value)
        {
            

            

            

            @event2 instance = new @event2(value);

            return instance;
        }
          

        // only called internally when something has been deserialized into
        // its primitive type.
        private static @event2 Deserialize(@record.@struct.@float.@decimal value)
        {
            

            

            

            return new @event2(value);
        }
        
            public  global::System.Boolean Equals(@event2 other)
            {
              if (ReferenceEquals(null, other))
              {
                  return false;
              }

              // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
              // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
              if(!_isInitialized || !other._isInitialized) return false;

              if (ReferenceEquals(this, other))
              {
                  return true;
              }

              return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<@record.@struct.@float.@decimal>.Default.Equals(Value, other.Value);
            }
             public global::System.Boolean Equals(@event2 other, global::System.Collections.Generic.IEqualityComparer<@event2> comparer)
             {
                 return comparer.Equals(this, other);
             }

             
            public global::System.Boolean Equals(@record.@struct.@float.@decimal primitive)
            {
              return Value.Equals(primitive);
            }

 public override global::System.Boolean Equals(global::System.Object obj)
 {
     return Equals(obj as @event2);
 }

        public static global::System.Boolean operator ==(@event2 left, @event2 right) => Equals(left, right);
        public static global::System.Boolean operator !=(@event2 left, @event2 right) => !Equals(left, right);

        public static global::System.Boolean operator ==(@event2 left, @record.@struct.@float.@decimal right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(@event2 left, @record.@struct.@float.@decimal right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(@record.@struct.@float.@decimal left, @event2 right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(@record.@struct.@float.@decimal left, @event2 right) => !Equals(left, right.Value);

        public static explicit operator @event2(@record.@struct.@float.@decimal value) => From(value);
        public static explicit operator @record.@struct.@float.@decimal(@event2 value) => value.Value;

        

        


          public override global::System.Int32 GetHashCode()
          {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32) 2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<@record.@struct.@float.@decimal>.Default.GetHashCode(Value);
                return hash;
            }
          }

        private void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }


        

        /// <summary>Returns the string representation of the underlying <see cref="@record.@struct.@float.@decimal" />.</summary>
    /// <inheritdoc cref="@record.@struct.@float.@decimal.ToString()" />
    public override global::System.String ToString() => _isInitialized ? Value.ToString() : "[UNINITIALIZED]";

        
        class @event2SystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<@event2>
        {
            public override @event2 Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var primitive = global::System.Text.Json.JsonSerializer.Deserialize<@record.@struct.@float.@decimal>(ref reader, options);
                return @event2.Deserialize(primitive);
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, @event2 value, global::System.Text.Json.JsonSerializerOptions options)
            {
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value);
            }

#if NET6_0_OR_GREATER
            public override @event2 ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var primitive = global::System.Text.Json.JsonSerializer.Deserialize<@record.@struct.@float.@decimal>(ref reader, options);
                return @event2.Deserialize(primitive);
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, @event2 value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(global::System.Text.Json.JsonSerializer.Serialize(value.Value));
            }
#endif            
        }


        class @event2TypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(@record.@struct.@float.@decimal);
            }
        
            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                @record.@struct.@float.@decimal ut = (@record.@struct.@float.@decimal)value;

                return @event2.Deserialize(ut);
            }
        
            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(@record.@struct.@float.@decimal);
            }
        
            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is @event2 idValue)
                {
                    return idValue.Value;
                }
        
                return base.ConvertTo(context, culture, value, destinationType);
            }
        }






        internal sealed class @event2DebugView
        {
            private readonly @event2 _t;

            @event2DebugView(@event2 t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "@record.@struct.@float.@decimal";
            public @record.@struct.@float.@decimal Value => _t.Value ;

            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(@event2SystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(@event2TypeConverter))]
";
                }
    }

}