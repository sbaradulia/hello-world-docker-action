// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace @class
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::Newtonsoft.Json.JsonConverter(typeof(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__eventNewtonsoftJsonConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__eventDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: @class.@record.@struct.@float.@event, Value = { _value }")]
    public sealed partial record class escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event : global::System.IEquatable<escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event>, global::System.IEquatable<@class.@record.@struct.@float.@event>
    {
#if DEBUG   
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly @class.@record.@struct.@float.@event _value;
        
        /// <summary>
        /// Gets the underlying <see cref="@class.@record.@struct.@float.@event" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
        /// </summary>
        public @class.@record.@struct.@float.@event Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            init
            {
                

                

                

                _value = value;
            }
        }


        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event(@class.@record.@struct.@float.@event value)
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event From(@class.@record.@struct.@float.@event value)
        {
            

            

            

            escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event instance = new escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event(value);

            return instance;
        }
  
        // only called internally when something has been deserialized into
        // its primitive type.
        private static escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event Deserialize(@class.@record.@struct.@float.@event value)
        {
            

            

            

            return new escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event(value);
        }
        
            public  global::System.Boolean Equals(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event other)
            {
              if (ReferenceEquals(null, other))
              {
                  return false;
              }

              // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
              // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
              if(!_isInitialized || !other._isInitialized) return false;

              if (ReferenceEquals(this, other))
              {
                  return true;
              }

              return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<@class.@record.@struct.@float.@event>.Default.Equals(Value, other.Value);
            }
             public global::System.Boolean Equals(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event other, global::System.Collections.Generic.IEqualityComparer<escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event> comparer)
             {
                 return comparer.Equals(this, other);
             }

             
            public global::System.Boolean Equals(@class.@record.@struct.@float.@event primitive)
            {
              return Value.Equals(primitive);
            }


        public static global::System.Boolean operator ==(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event left, @class.@record.@struct.@float.@event right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event left, @class.@record.@struct.@float.@event right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(@class.@record.@struct.@float.@event left, escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(@class.@record.@struct.@float.@event left, escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event right) => !Equals(left, right.Value);

        public static explicit operator escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event(@class.@record.@struct.@float.@event value) => From(value);
        public static explicit operator @class.@record.@struct.@float.@event(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event value) => value.Value;

        

        


          public override global::System.Int32 GetHashCode()
          {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32) 2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<@class.@record.@struct.@float.@event>.Default.GetHashCode(Value);
                return hash;
            }
          }

        private void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }


        

        // record enumerates fields - we just want our Value and to throw if it's not initialized.
        /// <summary>Returns the string representation of the underlying <see cref="@class.@record.@struct.@float.@event" />.</summary>
    /// <inheritdoc cref="@class.@record.@struct.@float.@event.ToString()" />
    public override global::System.String ToString() => _isInitialized ? Value.ToString() : "[UNINITIALIZED]";

        

        class escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__eventNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = ((escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event)value).Value;
                serializer.Serialize(writer, id);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<@class.@record.@struct.@float.@event?>(reader);
                return result.HasValue ? escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event.Deserialize(result.Value) : null;
            }
        }






        internal sealed class escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__eventDebugView
        {
            private readonly escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event _t;

            escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__eventDebugView(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__event t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "@class.@record.@struct.@float.@event";
            public @class.@record.@struct.@float.@event Value => _t.Value ;

            public global::System.String Conversions => @"[global::Newtonsoft.Json.JsonConverter(typeof(escapedTestspublic_sealed_partial_recordConversions_NewtonsoftJsonrecord__struct__float__eventNewtonsoftJsonConverter))]
";
                }
    }

}